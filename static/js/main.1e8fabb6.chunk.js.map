{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","window","setOptions","breaks","Renderer","link","href","title","text","App","className","icon","faFlushed","Editor","props","state","input","ChangeInput","bind","this","setState","target","value","id","class","type","onChange","React","Component","Previewer","dangerouslySetInnerHTML","__html","renderer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAKMA,EAASC,OAAOD,OACtBA,EAAOE,WAAW,CAChBC,QAAQ,IAEV,IAAMC,EAAW,IAAIJ,EAAOI,SAC5BA,EAASC,KAAO,SAASC,EAAMC,EAAOC,GAEpC,MAAO,mCAA4BF,EAA5B,aAAqCE,GAAS,QAkCxC,SAASC,IACtB,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,eAElB,cAAC,EAAD,IACA,cAAC,IAAD,CAAiBC,KAAMC,S,IAMvBC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAhDU,8gCAkDZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,+CAOnB,SAAYV,GACVW,KAAKC,SACD,CAACJ,MAAOR,EAAKa,OAAOC,U,oBAG1B,WACE,OACE,sBAAKC,GAAG,UAAR,UACE,sBAAKA,GAAG,gBAAgBC,MAAM,SAA9B,UACE,qBAAKA,MAAM,SAAX,oBACA,0BAAUD,GAAG,SAASE,KAAK,OAAOH,MAAOH,KAAKJ,MAAMC,MAAOU,SAAUP,KAAKF,iBAE5E,cAAC,EAAD,CAAWT,KAAMW,KAAKJ,MAAMC,e,GApBfW,IAAMC,WA0BvBC,EAAY,SAASf,GACvB,OACE,sBAAKS,GAAG,iBAAiBC,MAAM,SAA/B,UACE,qBAAKA,MAAM,SAAX,qBACA,qBAAKD,GAAG,UAAUO,wBAAyB,CACrCC,OAAQ/B,EAAOc,EAAMN,KAAM,CAAEwB,SAAU5B,WC7EpC6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1e8fabb6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFlushed } from '@fortawesome/free-regular-svg-icons';\n\nconst marked = window.marked;\nmarked.setOptions({\n  breaks: true\n});\nconst Renderer = new marked.Renderer();\nRenderer.link = function(href, title, text) {\n  // eslint-disable-next-line no-useless-concat\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n};\nlet DefaultState = `# Welcome to my React Markdown Previewer\n## I Hope you like it!\nYou may ask yourself what this website is for? Well, you can **easily** transform normally written text into a structured Documents with headings:\n# of\n## all\n### sizes\n#### you can\n##### possibly\n###### imagine\nYou can write **bold** or *italic*, you can integrate [links to cat photos](https://visualhunt.com/photos/cat/), or even put in the photos yourself:\n![cute cat photo](https://s3.amazonaws.com/freecodecamp/relaxing-cat.jpg)\nThere is tons of other stuff, like printing code: \\`function(example) {...}\\` or a little larger:\n\\`\\`\\`\nfunction(expample) {\n  if (this.example == \"funny\") {\n    return \"Awesome!\"\n  } else {\n    return \":(\";\n  }\n}\n\\`\\`\\`\nPretty ~~lame~~ funny, right?\nNot just Code comes in blocks, you can quote stuff in blocks too.\n>As easy as this!\n\nIf you happen to be making a list what you like about this editor, you can do that like this:\n- Nice colors\n- Easy handling\n- funny construction manual\n- no ads left and right\n`;\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <Editor />\n      <FontAwesomeIcon icon={faFlushed} />\n\n    </div>\n  );\n}\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: DefaultState\n    }\n    this.ChangeInput = this.ChangeInput.bind(this);\n  }\n  ChangeInput(text) {\n    this.setState(\n        {input: text.target.value}\n    );\n  }\n  render() {\n    return (\n      <div id=\"wrapper\">\n        <div id=\"editor-window\" class=\"window\">\n          <div class=\"header\">Editor</div>\n          <textarea id=\"editor\" type=\"text\" value={this.state.input} onChange={this.ChangeInput} />\n        </div>\n        <Previewer text={this.state.input} />\n      </div>\n    );\n  }\n}\n\nlet Previewer = function(props) {\n  return (\n    <div id=\"preview-window\" class=\"window\">\n      <div class=\"header\">Preview</div>\n      <div id=\"preview\" dangerouslySetInnerHTML={{\n            __html: marked(props.text, { renderer: Renderer })\n          }} />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}